Description: >
    This template deploys an Onyx Server
    Created by Luke Youngblood, luke@blockscale.net
Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    S3BucketName:
        Description: The name of the S3 bucket to store the certificates in
        AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
        ConstraintDescription: "The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        Type: String

    InstanceType: 
        Description: Which instance type should we use for the Onyx Server
        Type: String
        Default: t2.micro

    VPC:
        Description: Choose which VPC this Onyx server should be deployed to
        Type: AWS::EC2::VPC::Id
        
    KeyPair:
        Description: Select the KeyPair that you would like to use for the ECS cluster hosts
        Type: AWS::EC2::KeyPair::KeyName

Mappings:

    # These are the latest Amazon Linux AMIs as of April 14th, 2018:

    # You can find the latest available on this page of our documentation:
    # https://aws.amazon.com/amazon-linux-ami/

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-f63b1193
        us-east-1:
            AMI: ami-97785bed
        us-west-2:
            AMI: ami-f2d3638a
        us-west-1:
            AMI: ami-824c4ee2
        eu-west-3:
            AMI: ami-8ee056f3
        eu-west-2:
            AMI: ami-403e2524
        eu-west-1:
            AMI: ami-d834aba1
        eu-central-1:
            AMI: ami-5652ce39
        ap-northeast-2:
            AMI: ami-863090e8
        ap-northeast-1:
            AMI: ami-ceafcba8
        ap-southeast-2:
            AMI: ami-942dd1f6
        ap-southeast-1:
            AMI: ami-68097514
        ca-central-1:
            AMI: ami-a954d1cd
        ap-south-1:
            AMI: ami-531a4c3c
        sa-east-1:
            AMI: ami-84175ae8

Resources:

    S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref S3BucketName

    EC2Instance:
        Type: AWS::EC2::Instance
        DependsOn: S3Bucket
        Properties:
            IamInstanceProfile: !Ref InstanceProfile
            InstanceType: !Ref InstanceType
            ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            KeyName: !Ref KeyPair
            NetworkInterfaces:
                - AssociatePublicIpAddress: true
                  DeviceIndex: 0
                  GroupSet:
                    - !Ref InstanceSecurityGroup
            Tags:
                -
                  Key: Name
                  Value: !Sub ${EnvironmentName}-onyx-server
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    # NPM Install
                    cd /root
                    . /root/.bash_profile
                    export HOME=/root
                    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
                    . /root/.nvm/nvm.sh
                    nvm install --lts
                    nvm use --lts
                    node -e "console.log('Running Node.js ' + process.version)" > /root/node-version.txt

                    # Checkout repo
                    yum -y install git jq golang
                    git clone https://github.com/MainframeHQ/onyx-server.git
                    cd onyx-server
                    git checkout one-click-deploy

                    # Generate random passphrase
                    passphrase=`openssl rand -base64 32`
                    hostname=`curl http://169.254.169.254/latest/meta-data/public-hostname`

                    # Generate certificates
                    ./scripts/gen-certs.sh -p $passphrase -d $hostname

                    bucket='onyx-certificates'
                    # Copy certificates to S3
                    aws s3 cp /root/onyx-server/certs/ca-crt.pem s3://${S3BucketName}/ 
                    aws s3 cp /root/onyx-server/certs/client-crt.pem s3://${S3BucketName}/
                    aws s3 cp /root/onyx-server/certs/client-key.pem s3://${S3BucketName}/

                    # Make sure Onyx server will start on reboot
                    echo "logfile=/root/onyx-logfile" >> /etc/rc.local
                    echo "rm -f $logfile" >> /etc/rc.local
                    echo "cd /root/onyx-server" >> /etc/rc.local
                    echo './scripts/start_swarm_node.sh datadir > $logfile 2>&1 &' >> /etc/rc.local
                    echo 'while [ `grep "WebSocket endpoint opened" $logfile|wc -l` -lt 1 ]' >> /etc/rc.local
                    echo 'do' >> /etc/rc.local
                    echo '  sleep 10' >> /etc/rc.local
                    echo 'done' >> /etc/rc.local
                    echo '. /root/.nvm/nvm.sh' >> /etc/rc.local
                    echo 'nvm use --lts' >> /etc/rc.local
                    echo 'cd /root/onyx-server' >> /etc/rc.local
                    echo './bin/onyx-server' >> /etc/rc.local

                    npm install -g yarn
                    yarn install
                    yarn start

                    # Now start Geth and Onyx
                    logfile=/root/onyx-logfile
                    rm -f $logfile
                    cd /root/onyx-server
                    ./scripts/start_swarm_node.sh datadir > $logfile 2>&1 &
                    while [ `grep "WebSocket endpoint opened" $logfile|wc -l` -lt 1 ]
                    do
                      sleep 10
                    done
                    . /root/.nvm/nvm.sh
                    nvm use --lts
                    cd /root/onyx-server
                    ./bin/onyx-server

    # This IAM Role is attached to the EC2 instance, and allows it to write the certs to S3

    InstanceRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${EnvironmentName}-InstanceRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies: 
                - PolicyName: s3write
                  PolicyDocument: !Sub |
                    {
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                    "s3:ListAllMyBuckets",
                                    "s3:HeadBucket",
                                    "s3:ListObjects"
                                ],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": "s3:*",
                                "Resource": [
                                    "arn:aws:s3:::${S3BucketName}/*",
                                    "arn:aws:s3:::${S3BucketName}"
                                ]
                            }
                        ]
                    }

    InstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref InstanceRole

    InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub ${EnvironmentName}-SG
            GroupDescription: Allow Onyx traffic types
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 30399
                ToPort: 30399
                CidrIp: 0.0.0.0/0
              - IpProtocol: udp
                FromPort: 30399
                ToPort: 30399
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 5000
                ToPort: 5000
                CidrIp: 0.0.0.0/0
              - IpProtocol: tcp
                FromPort: 5002
                ToPort: 5002
                CidrIp: 0.0.0.0/0

Outputs:

    S3BucketName:
        Description: The S3 bucket where your certificates are stored.
        Value: !Ref S3Bucket

    EC2Hostname:
        Description: Paste the following URL into your Onyx client
        Value: !Join
         - ""
         - - "wss://"
           - !GetAtt EC2Instance.PublicDnsName
           - ":5000/graphql" 
